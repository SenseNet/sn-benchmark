<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SenseNet.Client</name>
    </assembly>
    <members>
        <member name="T:SenseNet.Client.ClientContext">
            <summary>
            Holds globally available context properties (e.g. username, urls, etc.). Please fill the
            properties of the ClientContext.Current singleton instance.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ClientContext.Current">
            <summary>
            A singleton client context instance. Use this for every context-related 
            operation (e.g. setting the upload chunk size) after initializing the context.
            </summary>
        </member>
        <member name="M:SenseNet.Client.ClientContext.Initialize(SenseNet.Client.ServerContext[])">
            <summary>
            Initializes the global context instance. You have to call this method
            before using the client context.
            </summary>
            <param name="servers"></param>
        </member>
        <member name="P:SenseNet.Client.ClientContext.Servers">
            <summary>
            The available servers that can be a target of client operations.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ClientContext.RandomServer">
            <summary>
            One of the configured servers, chosen randomly.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ClientContext.ChunkSizeInBytes">
            <summary>
            Number of bytes sent to the server in one chunk during upload operations. Default: 10 MB.
            </summary>
        </member>
        <member name="T:SenseNet.Client.ClientException">
            <summary>
            The exception that is thrown when an error occurs during any of the
            client operations. It contains organized information about the error
            parsed from the response.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ClientException.ErrorData">
            <summary>
            Parsed OData error details from the exception thrown on the server.
            </summary>
        </member>
        <member name="M:SenseNet.Client.ClientException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ClientException class.
            </summary>
        </member>
        <member name="M:SenseNet.Client.ClientException.#ctor(SenseNet.Client.ErrorData,System.Exception)">
            <summary>
            Initializes a new instance of the ClientException class.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ClientException.StatusCode">
            <summary>
            The HTTP error status code of the response.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ClientException.Response">
            <summary>
            Raw response text.
            </summary>
        </member>
        <member name="T:SenseNet.Client.ErrorData">
            <summary>
            Represents the properties of the exception thrown by the server.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ErrorData.ErrorCode">
            <summary>
            SenseNet OData-specific code of the error.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ErrorData.HttpStatusCode">
            <summary>
            HTTP status code parsed from the error response. This is a technical 
            property, check the ClientException.StatusCode property instead.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ErrorData.ExceptionType">
            <summary>
            .Net type name of the exception thrown on the server.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ErrorData.Message">
            <summary>
            Human readable error message information.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ErrorData.InnerError">
            <summary>
            Stack trace information from the server.
            </summary>
        </member>
        <member name="T:SenseNet.Client.ErrorMessage">
            <summary>
            Human readable error message information parsed from the response.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ErrorMessage.Language">
            <summary>
            Language code of the text in the Value property.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ErrorMessage.Value">
            <summary>
            Human readable error message.
            </summary>
        </member>
        <member name="T:SenseNet.Client.StackInfo">
            <summary>
            Server code stack trace information about the exception.
            </summary>
        </member>
        <member name="P:SenseNet.Client.StackInfo.Trace">
            <summary>
            Server code stack trace text. 
            </summary>
        </member>
        <member name="T:SenseNet.Client.ErrorResponse">
            <summary>
            Helper class for parsing the error response.
            </summary>
        </member>
        <member name="T:SenseNet.Client.Content">
            <summary>
            Central class for all content-related client operations. It contains predefined content 
            properties and can be extended with custom fields as it is a dynamic type.
            </summary>
        </member>
        <member name="P:SenseNet.Client.Content.Id">
            <summary>
            Content id.
            </summary>
        </member>
        <member name="P:SenseNet.Client.Content.ParentId">
            <summary>
            Id of the parent content.
            </summary>
        </member>
        <member name="P:SenseNet.Client.Content.Path">
            <summary>
            Content path.
            </summary>
        </member>
        <member name="P:SenseNet.Client.Content.ParentPath">
            <summary>
            Path of the parent content if available.
            </summary>
        </member>
        <member name="P:SenseNet.Client.Content.Name">
            <summary>
            Content name.
            </summary>
        </member>
        <member name="P:SenseNet.Client.Content.Server">
            <summary>
            The target server that this content belongs to.
            </summary>
        </member>
        <member name="M:SenseNet.Client.Content.#ctor(SenseNet.Client.ServerContext)">
            <summary>
            Internal constructor for client content.
            </summary>
            <param name="server">Target server. If null, the first one will be used from the configuration.</param>
        </member>
        <member name="M:SenseNet.Client.Content.#ctor(SenseNet.Client.ServerContext,System.Object)">
            <summary>
            Internal constructor for client content.
            </summary>
            <param name="server">Target server. If null, the first one will be used from the configuration.</param>
            <param name="responseContent">A JSON response that contains content fields.</param>
        </member>
        <member name="M:SenseNet.Client.Content.Create(System.Int32,SenseNet.Client.ServerContext)">
            <summary>
            Creates a new in-memory local representation of an existing content without loading it from the server.
            </summary>
            <param name="id">Content id.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.Create(System.String,SenseNet.Client.ServerContext)">
            <summary>
            Creates a new in-memory local representation of an existing content without loading it from the server.
            </summary>
            <param name="path">Content path.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.CreateNew(System.String,System.String,System.String,System.String,SenseNet.Client.ServerContext)">
            <summary>
            Creates a new content in memory without saving it.
            </summary>
            <param name="parentPath">Parent content path in the Content Repository.</param>
            <param name="contentType">Content type name.</param>
            <param name="name">Name of the new content.</param>
            <param name="contentTemplate">Content template path.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.CreateNew``1(System.String,System.String,System.String,System.String,SenseNet.Client.ServerContext)">
            <summary>
            Creates a new specialized content in memory without saving it.
            </summary>
            <typeparam name="T">One of the specialized client content types inheriting from Content (e.g. Group).</typeparam>
            <param name="parentPath">Parent content path in the Content Repository.</param>
            <param name="contentType">Content type name.</param>
            <param name="name">Name of the new content.</param>
            <param name="contentTemplate">Content template path.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.LoadAsync(System.Int32,SenseNet.Client.ServerContext)">
            <summary>
            Loads a content from the server.
            </summary>
            <param name="id">Content id.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.LoadAsync(System.String,SenseNet.Client.ServerContext)">
            <summary>
            Loads a content from the server.
            </summary>
            <param name="path">Content path.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.LoadAsync(SenseNet.Client.ODataRequest,SenseNet.Client.ServerContext)">
            <summary>
            Loads a content from the server. Use this method to specify a detailed 
            content request, for example wich fields you want to expand or select.
            </summary>
            <param name="requestData">Detailed information that will be sent as part of the request.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.ExistsAsync(System.String,SenseNet.Client.ServerContext)">
            <summary>
            Checks whether a content exists on the server with the provided path.
            </summary>
            <param name="path">Content path.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.LoadCollectionAsync(System.String,SenseNet.Client.ServerContext)">
            <summary>
            Loads children of a container.
            </summary>
            <param name="path">Path of the container.</param>
            <param name="server">Target server.</param>
            <returns></returns>
        </member>
        <member name="M:SenseNet.Client.Content.LoadCollectionAsync(SenseNet.Client.ODataRequest,SenseNet.Client.ServerContext)">
            <summary>
            Queries the server for content items using the provided request data.
            </summary>
            <param name="requestData">Detailed information that will be sent as part of the request.
            For example Top, Skip, Select, etc.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.LoadReferencesAsync(System.Int32,System.String,System.String[],SenseNet.Client.ServerContext)">
            <summary>
            Loads referenced content from a reference field.
            </summary>
            <param name="id">Content id.</param>
            <param name="fieldName">Reference field name.</param>
            <param name="select">Field names of the referenced content items to select.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.LoadReferencesAsync(System.String,System.String,System.String[],SenseNet.Client.ServerContext)">
            <summary>
            Loads referenced content from a reference field.
            </summary>
            <param name="path">Content path.</param>
            <param name="fieldName">Reference field name.</param>
            <param name="select">Field names of the referenced content items to select.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.GetCountAsync(System.String,System.String,SenseNet.Client.ServerContext)">
            <summary>
            Executes a count-only query in a subfolder on the server.
            </summary>
            <param name="path">Content path.</param>
            <param name="query">Content query text. If it is empty, the count of children will be returned.</param>
            <param name="server">Target server.</param>
            <returns>Count of result content.</returns>
        </member>
        <member name="M:SenseNet.Client.Content.QueryForAdminAsync(System.String,System.String[],System.String[],SenseNet.Client.QuerySettings,SenseNet.Client.ServerContext)">
            <summary>
            Executes a query on the server and returns results filtered and expanded 
            based on the provided parameters. Both lifespan and system content filters
            are disabled.
            </summary>
            <param name="queryText">Content query text.</param>
            <param name="select">Fields to select.</param>
            <param name="expand">Fields to expand.</param>
            <param name="settings">Query settings.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.QueryAsync(System.String,System.String[],System.String[],SenseNet.Client.QuerySettings,SenseNet.Client.ServerContext)">
            <summary>
            Executes a query on the server and returns results filtered and expanded 
            based on the provided parameters. 
            </summary>
            <param name="queryText">Content query text.</param>
            <param name="select">Fields to select.</param>
            <param name="expand">Fields to expand.</param>
            <param name="settings">Query settings.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.UploadAsync(System.String,System.String,System.IO.Stream,System.String,System.String,SenseNet.Client.ServerContext,System.Action{System.Int32})">
            <summary>
            Uploads a file to the server into the provided container.
            </summary>
            <param name="parentPath">Parent path.</param>
            <param name="fileName">Name of the file to upload.</param>
            <param name="stream">File contents.</param>
            <param name="contentType">Content type of the file.</param>
            <param name="propertyName">Name of the field to upload to. Default is Binary.</param>
            <param name="server">Target server.</param>
            <param name="progressCallback">An optional callback method that is called after each chunk is uploaded to the server.</param>
            <returns>The uploaded file content returned at the end of the upload request.</returns>
        </member>
        <member name="M:SenseNet.Client.Content.UploadAsync(System.Int32,System.String,System.IO.Stream,System.String,System.String,SenseNet.Client.ServerContext,System.Action{System.Int32})">
            <summary>
            Uploads a file to the server into the provided container.
            </summary>
            <param name="parentId">Parent id.</param>
            <param name="fileName">Name of the file to upload.</param>
            <param name="stream">File contents.</param>
            <param name="contentType">Content type of the file. Default is determined by the container.</param>
            <param name="propertyName">Name of the field to upload to. Default is Binary.</param>
            <param name="server">Target server.</param>
            <param name="progressCallback">An optional callback method that is called after each chunk is uploaded to the server.</param>
            <returns>The uploaded file content returned at the end of the upload request.</returns>
        </member>
        <member name="M:SenseNet.Client.Content.UploadBlobAsync(System.String,System.String,System.Int64,System.Func{System.Int32,System.Int32,System.String,System.Threading.Tasks.Task},System.String,System.String,System.String,SenseNet.Client.ServerContext)">
            <summary>
            Uploads a file or a custom binary property of a content in the provided container.
            </summary>
            <param name="parentPath">Parent path.</param>
            <param name="contentName">Name of the content to create or update.</param>
            <param name="fileSize">Full length of the binary data.</param>
            <param name="blobCallback">An action that is called between the initial and the finalizer requests. 
            Use this to actually save the binary through the blob storage component.
            Parameters: contentId, versionId, token</param>
            <param name="contentType">Content type of the new content. Default is determined by the allowed child types in the container.</param>
            <param name="fileName">Binary file name. Default is the content name.</param>
            <param name="propertyName">Binary field name. Default is "Binary".</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.UploadBlobAsync(System.Int32,System.String,System.Int64,System.Func{System.Int32,System.Int32,System.String,System.Threading.Tasks.Task},System.String,System.String,System.String,SenseNet.Client.ServerContext)">
            <summary>
            Uploads a file or a custom binary property of a content in the provided container.
            </summary>
            <param name="parentId">Parent id.</param>
            <param name="contentName">Name of the content to create or update.</param>
            <param name="fileSize">Full length of the binary data.</param>
            <param name="blobCallback">An action that is called between the initial and the finalizer requests. 
            Use this to actually save the binary through the blob storage component.
            Parameters: contentId, versionId, token</param>
            <param name="contentType">Content type of the new content. Default is determined by the allowed child types in the container.</param>
            <param name="fileName">Binary file name. Default is the content name.</param>
            <param name="propertyName">Binary field name. Default is "Binary".</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.GetBlobToken(System.Int32,System.String,System.String,SenseNet.Client.ServerContext)">
            <summary>
            Gets a blob storage token that identifies a binary in the storage.
            </summary>
            <param name="id">Content id.</param>
            <param name="version">Content version (e.g. V2.3D). If not provided, the highest version 
            accessible to the current user will be served.</param>
            <param name="propertyName">Binary field name. Default is Binary.</param>
            <param name="server">Target server.</param>
            <returns>A token that can be used with the Blob storage API.</returns>
        </member>
        <member name="M:SenseNet.Client.Content.GetBlobToken(System.String,System.String,System.String,SenseNet.Client.ServerContext)">
            <summary>
            Gets a blob storage token that identifies a binary in the storage.
            </summary>
            <param name="path">Content path.</param>
            <param name="version">Content version (e.g. V2.3D). If not provided, the highest version 
            accessible to the current user will be served.</param>
            <param name="propertyName">Binary field name. Default is Binary.</param>
            <param name="server">Target server.</param>
            <returns>A token that can be used with the Blob storage API.</returns>
        </member>
        <member name="M:SenseNet.Client.Content.SaveAsync">
            <summary>
            Saves the content to the server.
            </summary>
        </member>
        <member name="M:SenseNet.Client.Content.DeleteAsync(System.Boolean)">
            <summary>
            Deletes the content.
            </summary>
            <param name="permanent">Delete the content permanently or into the Trash.</param>
        </member>
        <member name="M:SenseNet.Client.Content.MoveToAsync(System.String)">
            <summary>
            Moves the content to the target location.
            </summary>
            <param name="targetPath">Target path.</param>
        </member>
        <member name="M:SenseNet.Client.Content.CopyToAsync(System.String)">
            <summary>
            Creates a copy of the content to the target location.
            </summary>
            <param name="targetPath">Target path.</param>
        </member>
        <member name="M:SenseNet.Client.Content.CheckOutAsync">
            <summary>
            Locks the content for the current user.
            </summary>
        </member>
        <member name="M:SenseNet.Client.Content.CheckInAsync">
            <summary>
            Check in the content.
            </summary>
        </member>
        <member name="M:SenseNet.Client.Content.UndoCheckOutAsync">
            <summary>
            Undo all modifications on the content since the last checkout operation.
            </summary>
        </member>
        <member name="M:SenseNet.Client.Content.HasPermissionAsync(System.String[],System.String,SenseNet.Client.ServerContext)">
            <summary>
            Checks whether a user has the provided permissions on the content.
            </summary>
            <param name="permissions">Permission names to check.</param>
            <param name="user">The user who's permissions need to be checked. If it is not provided, the server checks the current user.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.BreakInheritanceAsync(SenseNet.Client.ServerContext)">
            <summary>
            Breaks permissions on the content.
            </summary>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.UnbreakInheritanceAsync(SenseNet.Client.ServerContext)">
            <summary>
            Removes permission break on the content.
            </summary>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Content.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            Gets a dynamic property value, for example value of a content field (DynamicObject implementation).
            </summary>
            <param name="binder">Property binder definition.</param>
            <param name="result">Field value if found.</param>
            <returns>Whether the field value was found or not.</returns>
        </member>
        <member name="M:SenseNet.Client.Content.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            Sets a dynamic property value, for example value of a content field (DynamicObject implementation).
            </summary>
            <param name="binder">Property binder definition.</param>
            <param name="value">Field value to set.</param>
            <returns>This operation is always succesful.</returns>
        </member>
        <member name="M:SenseNet.Client.Content.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            Calls a dynamic method on a content. It will be resolved into an asynchronous OData action request (DynamicObject implementation).
            </summary>
            <param name="binder">Method binder definition.</param>
            <param name="args">Method arguments provided by the caller.</param>
            <param name="result">An awaitable Task&lt;dynamic&gt; object containing the response of the action request.</param>
            <returns>Aleays true.</returns>
        </member>
        <member name="P:SenseNet.Client.Content.Item(System.String)">
            <summary>
            Gets or sets a content field value. If the value has been set locally, it returns that. 
            Otherwise it checks the fields returned from the server.
            </summary>
            <param name="fieldName">Name of the field.</param>
            <returns>The field value if found, otherwise null.</returns>
        </member>
        <member name="T:SenseNet.Client.ContentExtensions">
            <summary>
            Offers extension methods for client Content operations.
            </summary>
        </member>
        <member name="M:SenseNet.Client.ContentExtensions.ToContentEnumerable(System.Collections.Generic.IEnumerable{System.Object},SenseNet.Client.ServerContext)">
            <summary>
            Converts a dynamic collection to a collection of client Content.
            </summary>
            <param name="source">List of dynamic items (e.g a reference field value in a content JSON) that can be coverted to Content items.</param>
            <param name="server">Optional server argument for content items.</param>
        </member>
        <member name="M:SenseNet.Client.ContentExtensions.ToContentEnumerable(Newtonsoft.Json.Linq.JArray,SenseNet.Client.ServerContext)">
            <summary>
            Converts a JArray to a collection of client Content.
            </summary>
            <param name="source">Array of JTokens (e.g a reference field value in a content JSON) that can be coverted to Content items.</param>
            <param name="server">Optional server argument for content items.</param>
        </member>
        <member name="T:SenseNet.Client.FileSystemEnumerator">
            <summary>
            Obsolete file system enumerator class. For importing documents please use the Importer class instead.
            </summary>
        </member>
        <member name="T:SenseNet.Client.Group">
            <summary>
            Specialized client content for handling group-related operations.
            </summary>
        </member>
        <member name="M:SenseNet.Client.Group.#ctor(SenseNet.Client.ServerContext)">
            <summary>
            Initializes an instance of a Group.
            </summary>
            <param name="server"></param>
        </member>
        <member name="M:SenseNet.Client.Group.AddMembersAsync(System.Int32,System.Int32[],SenseNet.Client.ServerContext)">
            <summary>
            Adds members to a group.
            </summary>
            <param name="groupId">Group id.</param>
            <param name="memberIds">Ids of members to add to the group.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Group.RemoveMembersAsync(System.Int32,System.Int32[],SenseNet.Client.ServerContext)">
            <summary>
            Removes members from a group.
            </summary>
            <param name="groupId">Group id.</param>
            <param name="memberIds">Ids of members to remove from the group.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Group.AddMembersAsync(System.Int32[])">
            <summary>
            Adds members to a group.
            </summary>
            <param name="memberIds">Ids of members to add to the group.</param>
        </member>
        <member name="M:SenseNet.Client.Group.RemoveMembersAsync(System.Int32[])">
            <summary>
            Removes members from a group.
            </summary>
            <param name="memberIds">Ids of members to remove from the group.</param>
        </member>
        <member name="T:SenseNet.Client.ImporterAlgorithm">
            <summary>
            Available algorithms for importing files and folders from the file system.
            </summary>
        </member>
        <member name="F:SenseNet.Client.ImporterAlgorithm.BreadthFirst">
            <summary>
            Uses a ConcurrentQueue for managing the subfolders to process next.
            </summary>
        </member>
        <member name="F:SenseNet.Client.ImporterAlgorithm.DepthFirst">
            <summary>
            Uses a ConcurrentStack for managing the subfolders to process next.
            </summary>
        </member>
        <member name="T:SenseNet.Client.ImportOptions">
            <summary>
            Options for customizing the import behavior.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ImportOptions.MaxDegreeOfParallelism">
            <summary>
            Determines how many concurrent operations (e.g. file uploads or 
            folder creations) may occur at the same time. Default is 5.
            1 means sequential processing.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ImportOptions.Recursive">
            <summary>
            Processing order of folders.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ImportOptions.Flatten">
            <summary>
            Whether to upload all files to the root folder. Default is false;
            </summary>
        </member>
        <member name="P:SenseNet.Client.ImportOptions.Algorithm">
            <summary>
            Determines the algorithm used for importing files and folders, affecting the order of creation.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ImportOptions.Overwrite">
            <summary>
            Whether the importer should overwrite existing files or not. Default is True.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ImportOptions.FileSearchPattern">
            <summary>
            Search pattern for files. Default is "*"
            </summary>
        </member>
        <member name="P:SenseNet.Client.ImportOptions.FolderSearchPattern">
            <summary>
            Search pattern for folders. Default is "*"
            </summary>
        </member>
        <member name="P:SenseNet.Client.ImportOptions.ContainerTypeName">
            <summary>
            Optional content type name for folder content (e.g. MyCustomFolder).
            The importer will use this type when creating folders.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ImportOptions.FileTypeName">
            <summary>
            Optional content type name for files (e.g. MyCustomFile).
            The importer will use this type when uploading files.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ImportOptions.FolderImportCallback">
            <summary>
            Called after creating a folder.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ImportOptions.FileImportCallback">
            <summary>
            Called after uploading a file.
            </summary>
        </member>
        <member name="M:SenseNet.Client.ImportOptions.#ctor">
            <summary>
            Creates a new instance of ImportOptions for configuring the import behavior.
            </summary>
        </member>
        <member name="T:SenseNet.Client.Importer">
            <summary>
            Provides an API for importing files and folders from the file system.
            </summary>
        </member>
        <member name="M:SenseNet.Client.Importer.ImportAsync(System.String,System.String,SenseNet.Client.ImportOptions)">
            <summary>
            Imports files and folders from the file system to the content repository through its REST API.
            </summary>
            <param name="sourcePath">File system path (folder or file) to import.</param>
            <param name="targetPath">Content Repository path to import to.</param>
            <param name="options">Import options.</param>
        </member>
        <member name="T:SenseNet.Client.JsonHelper">
            <summary>
            Provides helper methods for JSON operations.
            </summary>
        </member>
        <member name="P:SenseNet.Client.JsonHelper.JsonSerializerSettings">
            <summary>
            Default serializer settings with ISO date format and None as type name handling option.
            </summary>
        </member>
        <member name="M:SenseNet.Client.JsonHelper.Serialize(System.Object)">
            <summary>
            Serializes the specified object as a JSON string.
            </summary>
            <param name="obj">The object to serialize.</param>
        </member>
        <member name="M:SenseNet.Client.JsonHelper.Deserialize``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="json">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:SenseNet.Client.JsonHelper.Deserialize(System.String)">
            <summary>
            Deserializes the JSON to a dynamic JObject.
            </summary>
            <param name="json">The JSON to deserialize.</param>
            <returns>A dynamic JObject deserialized from the JSON string.</returns>
        </member>
        <member name="M:SenseNet.Client.JsonHelper.GetJsonPostModel(System.Object)">
            <summary>
            Serializes a .NET object to JSON and wraps it into a 'models=[...]' array
            that can be sent to the OData REST API.
            </summary>
            <param name="data">A .NET object to serialize.</param>
        </member>
        <member name="T:SenseNet.Client.MetadataFormat">
            <summary>
            Expected format of the OData response.
            </summary>
        </member>
        <member name="F:SenseNet.Client.MetadataFormat.None">
            <summary>
            No metadata.
            </summary>
        </member>
        <member name="F:SenseNet.Client.MetadataFormat.Minimal">
            <summary>
            Only a self url and a content type is returned.
            </summary>
        </member>
        <member name="F:SenseNet.Client.MetadataFormat.Full">
            <summary>
            Contains the self url, content type and all available actions and functions.
            </summary>
        </member>
        <member name="T:SenseNet.Client.FilterStatus">
            <summary>
            Values for enabling or disabling content query filters.
            </summary>
        </member>
        <member name="F:SenseNet.Client.FilterStatus.Default">
            <summary>
            Default (actual value depends on the server).
            </summary>
        </member>
        <member name="F:SenseNet.Client.FilterStatus.Enabled">
            <summary>
            The filter is enabled.
            </summary>
        </member>
        <member name="F:SenseNet.Client.FilterStatus.Disabled">
            <summary>
            The filter is disabled.
            </summary>
        </member>
        <member name="T:SenseNet.Client.ODataRequest">
            <summary>
            Encapsulates all parameters that an OData REST API request can handle. Use it
            for constructing advanced OData requests.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.Path">
            <summary>
            Content path that will be the base of the OData request if the Content id is not provided.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.ContentId">
            <summary>
            Content id that will be the base of the OData request.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.SiteUrl">
            <summary>
            Site URL that represents the server to send the request to.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.PropertyName">
            <summary>
            Content field or property name.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.ActionName">
            <summary>
            Action name.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.Version">
            <summary>
            Version request parameter.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.Top">
            <summary>
            Top query parameter.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.Skip">
            <summary>
            Skip query parameter.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.CountOnly">
            <summary>
            Count only query parameter.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.Select">
            <summary>
            List of selectable fields.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.Expand">
            <summary>
            List of expandable fields.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.IsCollectionRequest">
            <summary>
            Whether this is a request that targets a single OData resource or a collection.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.Metadata">
            <summary>
            Format of the requested metadata information. Default is None.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ODataRequest.Parameters">
            <summary>
            Custom URL parameters.
            </summary>
        </member>
        <member name="M:SenseNet.Client.ODataRequest.#ctor">
            <summary>
            Initializes an instance of the ODataRequest class.
            </summary>
        </member>
        <member name="M:SenseNet.Client.ODataRequest.ToString">
            <summary>
            Compiles the properties of the request to a single URI string.
            </summary>
        </member>
        <member name="M:SenseNet.Client.ODataRequest.GetUri">
            <summary>
            Compiles the properties of the request to a single URI.
            </summary>
        </member>
        <member name="M:SenseNet.Client.ODataRequest.GetItemUrlBase">
            <summary>
            Creates the first path of the url, without properties and parameters
            </summary>
        </member>
        <member name="T:SenseNet.Client.Projection">
            <summary>
            Encapsulates select and the corresponding expand parameters for an OData request. Use a property 
            path list to initialize a Projection. A single property path is like 'Members.Manager.Address'.
            </summary>
        </member>
        <member name="M:SenseNet.Client.Projection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the Projection class.
            </summary>
            <param name="propertyPaths">List of property paths. A single path is like 'asdf.qwer.yxcv'.</param>
        </member>
        <member name="T:SenseNet.Client.QuerySettings">
            <summary>
            Represents Content Query settings in an OData request.
            </summary>
        </member>
        <member name="P:SenseNet.Client.QuerySettings.Top">
            <summary>
            Top query parameter.
            </summary>
        </member>
        <member name="P:SenseNet.Client.QuerySettings.Skip">
            <summary>
            Skip query parameter.
            </summary>
        </member>
        <member name="P:SenseNet.Client.QuerySettings.EnableAutofilters">
            <summary>
            Enable autofilters query parameter.
            </summary>
        </member>
        <member name="P:SenseNet.Client.QuerySettings.EnableLifespanFilter">
            <summary>
            Enable lifespan filter query parameter.
            </summary>
        </member>
        <member name="M:SenseNet.Client.QuerySettings.CreateForAdmin">
            <summary>
            Creates query settings with filters switched off.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SenseNet.Client.RepositoryPath">
            <summary>
            Client side helper methods for Content Repository paths.
            </summary>
        </member>
        <member name="F:SenseNet.Client.RepositoryPath.PathSeparator">
            <summary>
            Separator character in paths.
            </summary>
        </member>
        <member name="M:SenseNet.Client.RepositoryPath.GetFileName(System.String)">
            <summary>
            Gets the content name (the last segment) from a Content Repository path.
            </summary>
            <param name="path">Content Repository path.</param>
        </member>
        <member name="M:SenseNet.Client.RepositoryPath.GetParentPath(System.String)">
            <summary>
            Gets the parent path from a Content Repository path.
            </summary>
            <param name="path">Content Repository path.</param>
        </member>
        <member name="M:SenseNet.Client.RepositoryPath.Combine(System.String,System.String)">
            <summary>
            Combines two Content Repository path segments.
            </summary>
            <param name="path1">Left segment.</param>
            <param name="path2">Right segment.</param>
        </member>
        <member name="M:SenseNet.Client.RepositoryPath.IsInvalidNameChar(System.Char)">
            <summary>
            Determines whether a character is allowed in a content name or not.
            </summary>
            <param name="c">A character to check.</param>
        </member>
        <member name="T:SenseNet.Client.HttpMethods">
            <summary>
            Predefined HTTP methods to be used in OData requests.
            </summary>
        </member>
        <member name="F:SenseNet.Client.HttpMethods.PATCH">
            <summary>
            PATCH method.
            </summary>
        </member>
        <member name="F:SenseNet.Client.HttpMethods.POST">
            <summary>
            POST method.
            </summary>
        </member>
        <member name="T:SenseNet.Client.RESTCaller">
            <summary>
            Sends HTTP requests to the SenseNet OData REST API.
            </summary>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.GetContentAsync(System.Int32,SenseNet.Client.ServerContext)">
            <summary>
            Loads a content from the server.
            </summary>
            <param name="contentId">Content id.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.GetContentAsync(System.String,SenseNet.Client.ServerContext)">
            <summary>
            Loads a content from the server.
            </summary>
            <param name="path">Content path.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.GetContentAsync(SenseNet.Client.ODataRequest,SenseNet.Client.ServerContext)">
            <summary>
            Loads a content from the server.
            </summary>
            <param name="requestData">OData request parameters, for example select or expand.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.GetCollectionAsync(System.String,SenseNet.Client.ServerContext)">
            <summary>
            Loads children of a container.
            </summary>
            <param name="path">Content path.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.GetCollectionAsync(SenseNet.Client.ODataRequest,SenseNet.Client.ServerContext)">
            <summary>
            Queries the server for content items using the provided request data.
            </summary>
            <param name="requestData">OData request parameters, for example select or expand.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.GetCountAsync(SenseNet.Client.ODataRequest,SenseNet.Client.ServerContext)">
            <summary>
            Executes a count-only query on the server.
            </summary>
            <param name="requestData">OData request parameters, most importantly the query.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.GetResponseStringAsync(System.Int32,System.String,System.Net.Http.HttpMethod,System.String,SenseNet.Client.ServerContext)">
            <summary>
            Gets the raw response of an OData single content request from the server.
            </summary>
            <param name="contentId">Content id.</param>
            <param name="actionName">Action name.</param>
            <param name="method">HTTP method (SenseNet.Client.HttpMethods class has a few predefined methods).</param>
            <param name="body">Request body.</param>
            <param name="server">Target server.</param>
            <returns>Raw HTTP response.</returns>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.GetResponseStringAsync(System.String,System.String,System.Net.Http.HttpMethod,System.String,SenseNet.Client.ServerContext)">
            <summary>
            Gets the raw response of an OData single content request from the server.
            </summary>
            <param name="path">Content path.</param>
            <param name="actionName">Action name.</param>
            <param name="method">HTTP method (SenseNet.Client.HttpMethods class has a few predefined methods).</param>
            <param name="body">Request body.</param>
            <param name="server">Target server.</param>
            <returns>Raw HTTP response.</returns>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.GetResponseStringAsync(System.Uri,SenseNet.Client.ServerContext,System.Net.Http.HttpMethod,System.String)">
            <summary>
            Gets the raw response of a general HTTP request from the server.
            </summary>
            <param name="uri">Request URI.</param>
            <param name="method">HTTP method (SenseNet.Client.HttpMethods class has a few predefined methods).</param>
            <param name="body">Request body.</param>
            <param name="server">Target server.</param>
            <returns>Raw HTTP response.</returns>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.GetResponseJsonAsync(SenseNet.Client.ODataRequest,SenseNet.Client.ServerContext,System.Net.Http.HttpMethod,System.Object)">
            <summary>
            Gets the response of an OData request as a dynamic JSON object.
            </summary>
            <param name="requestData">OData request parameters, for example select or expand.</param>
            <param name="server">Target server.</param>
            <param name="method">Http method (e.g. Post). Default is Get.</param>
            <param name="postData">An object containing properties to be sent in the body. It will be serialized to JSON.</param>
            <returns>A dynamic JSON object deserialized from the response.</returns>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.GetStreamRequest(System.Int32,System.String,System.String,SenseNet.Client.ServerContext)">
            <summary>
            Assembles an http request that gets a stream from the portal containing binary data.
            Use this inside a using block to asynchronously get the response stream.
            Please catch WebExceptions and parse them using the GetClientExceptionAsync method.
            </summary>
            <param name="id">Content id.</param>
            <param name="version">Content version (e.g. V2.3D). If not provided, the highest version 
            accessible to the current user will be served.</param>
            <param name="propertyName">Binary field name. Default is Binary.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.PostContentAsync(System.String,System.Object,SenseNet.Client.ServerContext)">
            <summary>
            Sends a POST OData request to the server containing the specified data.
            </summary>
            <param name="parentPath">Content Repository path to send the response to.</param>
            <param name="postData">A .NET object to serialize as post data.</param>
            <param name="server">Target server.</param>
            <returns>A deserialized dynamic JSON object parsed from the response.</returns>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.PatchContentAsync(System.Int32,System.Object,SenseNet.Client.ServerContext)">
            <summary>
            Sends a PATCH OData request to the server containing the specified data.
            </summary>
            <param name="contentId">Content id</param>
            <param name="postData">A .NET object to serialize as post data.</param>
            <param name="server">Target server.</param>
            <returns>A deserialized dynamic JSON object parsed from the response.</returns>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.PatchContentAsync(System.String,System.Object,SenseNet.Client.ServerContext)">
            <summary>
            Sends a PATCH OData request to the server containing the specified data.
            </summary>
            <param name="path">Content path</param>
            <param name="postData">A .NET object to serialize as post data.</param>
            <param name="server">Target server.</param>
            <returns>A deserialized dynamic JSON object parsed from the response.</returns>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.PutContentAsync(System.String,System.Object,SenseNet.Client.ServerContext)">
            <summary>
            Sends a PUT OData request to the server containing the specified data.
            </summary>
            <param name="path">Content path</param>
            <param name="postData">A .NET object to serialize as post data.</param>
            <param name="server">Target server.</param>
            <returns>A deserialized dynamic JSON object parsed from the response.</returns>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.UploadAsync(System.IO.Stream,SenseNet.Client.UploadData,System.Int32,SenseNet.Client.ServerContext,System.Action{System.Int32})">
            <summary>
            Uploads a file to the server into the provided container.
            </summary>
            <param name="binaryStream">File contents.</param>
            <param name="uploadData">Upload parameters.</param>
            <param name="parentId">Parent id.</param>
            <param name="server">Target server.</param>
            <param name="progressCallback">An optional callback method that is called after each chunk is uploaded to the server.</param>
            <returns>The uploaded file content returned at the end of the upload request.</returns>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.UploadAsync(System.IO.Stream,SenseNet.Client.UploadData,System.String,SenseNet.Client.ServerContext,System.Action{System.Int32})">
            <summary>
            Uploads a file to the server into the provided container.
            </summary>
            <param name="binaryStream">File contents.</param>
            <param name="uploadData">Upload parameters.</param>
            <param name="parentPath">Parent path.</param>
            <param name="server">Target server.</param>
            <param name="progressCallback">An optional callback method that is called after each chunk is uploaded to the server.</param>
            <returns>The uploaded file content returned at the end of the upload request.</returns>
        </member>
        <member name="M:SenseNet.Client.RESTCaller.GetClientExceptionAsync(System.Net.WebException,System.String,System.Net.Http.HttpMethod,System.String)">
            <summary>
            Parses an error response and wraps all the information in it into a ClientException.
            </summary>
            <param name="ex">Original web exception.</param>
            <param name="requestUrl">Request url that caused the web exception.</param>
            <param name="method">Http method (e.g GET or POST)</param>
            <param name="body">Request body.</param>
            <returns>A client exception that contains parsed server info (e.g. OData exception type,
            status code, original response text, etc.) and the original exception as an inner exception.</returns>
        </member>
        <member name="M:SenseNet.Client.RESTExtensions.AppendParameter(System.Text.StringBuilder,System.String,System.Object)">
            <summary>
            Appends a key=value pair to a string with the '&amp;' character as a separator.
            </summary>
        </member>
        <member name="T:SenseNet.Client.Security.Permission">
            <summary>
            Permission names needed by the permission client API (e.g. the HasPermission method).
            </summary>
        </member>
        <member name="T:SenseNet.Client.Security.SecurityManager">
            <summary>
            Static API for permission-related operations.
            </summary>
        </member>
        <member name="M:SenseNet.Client.Security.SecurityManager.SetPermissionsAsync(System.Int32,SenseNet.Client.Security.SetPermissionRequest[],SenseNet.Client.ServerContext)">
            <summary>
            Sets the provided permissions on the provided content.
            </summary>
            <param name="contentId">Id of a content.</param>
            <param name="permissions">Permission settings to be sent to the server.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Security.SecurityManager.HasPermissionAsync(System.Int32,System.String[],System.String,SenseNet.Client.ServerContext)">
            <summary>
            Checks whether a user has the provided permissions on the provided content.
            </summary>
            <param name="contentId">Id of a content.</param>
            <param name="permissions">Permission names to check.</param>
            <param name="user">The user who's permissions need to be checked. If it is not provided, the server checks the current user.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Security.SecurityManager.BreakInheritanceAsync(System.Int32,SenseNet.Client.ServerContext)">
            <summary>
            Breaks permissions on the provided content.
            </summary>
            <param name="contentId">Id of a content.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="M:SenseNet.Client.Security.SecurityManager.UnbreakInheritanceAsync(System.Int32,SenseNet.Client.ServerContext)">
            <summary>
            Removes permission break on the provided content.
            </summary>
            <param name="contentId">Id of a content.</param>
            <param name="server">Target server.</param>
        </member>
        <member name="T:SenseNet.Client.Security.PermissionValue">
            <summary>
            Represents the possible values of permissions.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.PermissionValue.Undefined">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.PermissionValue.Allow">
            <summary>
            Allow this permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.PermissionValue.Deny">
            <summary>
            Deny this permission.
            </summary>
        </member>
        <member name="T:SenseNet.Client.Security.SetPermissionRequest">
            <summary>
            Represents the data that is sent to the server during a permission request. Fill only
            the permission values that you want to set or change.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Identity">
            <summary>
            Id or Path of a user, group or organizational unit.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.LocalOnly">
            <summary>
            Whether this permission is local only or inheritable.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.See">
            <summary>
            See permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Preview">
            <summary>
            Preview permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.PreviewWithoutWatermark">
            <summary>
            PreviewWithoutWatermark permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.PreviewWithoutRedaction">
            <summary>
            PreviewWithoutRedaction permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Open">
            <summary>
            Open permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.OpenMinor">
            <summary>
            OpenMinor permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Save">
            <summary>
            Save permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Publish">
            <summary>
            Publish permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.ForceCheckin">
            <summary>
            ForceCheckin permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.AddNew">
            <summary>
            AddNew permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Approve">
            <summary>
            Approve permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Delete">
            <summary>
            Delete permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.RecallOldVersion">
            <summary>
            RecallOldVersion permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.DeleteOldVersion">
            <summary>
            DeleteOldVersion permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.SeePermissions">
            <summary>
            SeePermissions permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.SetPermissions">
            <summary>
            SetPermissions permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.RunApplication">
            <summary>
            RunApplication permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.ManageListsAndWorkspaces">
            <summary>
            ManageListsAndWorkspaces permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom01">
            <summary>
            Custom01 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom02">
            <summary>
            Custom02 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom03">
            <summary>
            Custom03 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom04">
            <summary>
            Custom04 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom05">
            <summary>
            Custom05 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom06">
            <summary>
            Custom06 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom07">
            <summary>
            Custom07 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom08">
            <summary>
            Custom08 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom09">
            <summary>
            Custom09 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom10">
            <summary>
            Custom10 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom11">
            <summary>
            Custom11 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom12">
            <summary>
            Custom12 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom13">
            <summary>
            Custom13 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom14">
            <summary>
            Custom14 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom15">
            <summary>
            Custom15 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom16">
            <summary>
            Custom16 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom17">
            <summary>
            Custom17 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom18">
            <summary>
            Custom18 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom19">
            <summary>
            Custom19 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom20">
            <summary>
             Custom20permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom21">
            <summary>
            Custom21 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom22">
            <summary>
            Custom22 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom23">
            <summary>
            Custom23 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom24">
            <summary>
            Custom24 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom25">
            <summary>
            Custom25 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom26">
            <summary>
            Custom26 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom27">
            <summary>
            Custom27 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom28">
            <summary>
            Custom28 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom29">
            <summary>
            Custom29 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom30">
            <summary>
            Custom30 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom31">
            <summary>
            Custom31 permission.
            </summary>
        </member>
        <member name="F:SenseNet.Client.Security.SetPermissionRequest.Custom32">
            <summary>
            Custom32 permission.
            </summary>
        </member>
        <member name="M:SenseNet.Client.Security.SetPermissionRequest.Copy">
            <summary>
            Creates a copy of this permission request object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SenseNet.Client.ServerContext">
            <summary>
            Represents a connection to a server.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ServerContext.Username">
            <summary>
            Username used for authenticating all requests made to this server.
            In case of an empty username DefaultCredentials will be used.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ServerContext.Password">
            <summary>
            Password for the username.
            </summary>
        </member>
        <member name="P:SenseNet.Client.ServerContext.Url">
            <summary>
            Server URL.
            </summary>
        </member>
        <member name="M:SenseNet.Client.ServerContext.GetUrl(SenseNet.Client.ServerContext)">
            <summary>
            Gets a URL from a server instance for sending requests. In case of a null
            instance the first one from the currently configured list will be used.
            </summary>
            <param name="server">Server context object.</param>
        </member>
        <member name="T:SenseNet.Client.Tools">
            <summary>
            Client tools.
            </summary>
        </member>
        <member name="M:SenseNet.Client.Tools.GenerateStreamFromString(System.String)">
            <summary>
            Creates a memory stream from the provided string. Please always use the result of this method 
            in a using statement - or make sure that the stream is closed eventually.
            </summary>
            <param name="s"></param>
            <returns>A mempory stream.</returns>
        </member>
        <member name="M:SenseNet.Client.Tools.EnsurePathAsync(System.String,System.String)">
            <summary>
            Checks if the provided repository path exists and creates the missing containers all the way up to the root.
            </summary>
            <param name="path">The path to create containers for.</param>
            <param name="containerTypeName">Optional: content type name of created containers. Default is Folder.</param>
            <returns>The newly created container. If it already exists, this method returns null.</returns>
        </member>
        <member name="T:SenseNet.Client.UploadData">
            <summary>
            Contains upload properties to be filled during an upload request.
            </summary>
        </member>
        <member name="P:SenseNet.Client.UploadData.FileName">
            <summary>
            File name to be uploaded.
            </summary>
        </member>
        <member name="P:SenseNet.Client.UploadData.ContentId">
            <summary>
            Content id. Filled in case of existing content.
            </summary>
        </member>
        <member name="P:SenseNet.Client.UploadData.ContentType">
            <summary>
            Content type name.
            </summary>
        </member>
        <member name="P:SenseNet.Client.UploadData.PropertyName">
            <summary>
            Property name.
            </summary>
        </member>
        <member name="P:SenseNet.Client.UploadData.UseChunk">
            <summary>
            Whether upload data in chunks or not.
            </summary>
        </member>
        <member name="P:SenseNet.Client.UploadData.Overwrite">
            <summary>
            Whether overwrite existing files or not.
            </summary>
        </member>
        <member name="P:SenseNet.Client.UploadData.ChunkToken">
            <summary>
            Chunk token received from the server during the first upload request.
            Fill this in case of subsequent requests.
            </summary>
        </member>
        <member name="P:SenseNet.Client.UploadData.FileLength">
            <summary>
            Length of the file to be uploaded.
            </summary>
        </member>
        <member name="M:SenseNet.Client.UploadData.#ctor">
            <summary>
            Initializes a new UploadData object.
            </summary>
        </member>
        <member name="M:SenseNet.Client.UploadData.ToString">
            <summary>
            Compiles upload data properties into a single string that can be sent as a post data.
            </summary>
        </member>
        <member name="M:SenseNet.Client.UploadData.ToDictionary">
            <summary>
            Assembles all filled properties of the upload data object to a dictionary for serialization.
            </summary>
        </member>
    </members>
</doc>
